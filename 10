#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_SIZE 100 // Define the maximum size of the stack

// Structure to represent the stack
struct Stack {
    int top;
    int items[MAX_SIZE];
};

// Function to create a stack and initialize its top
struct Stack* createStack() {
    struct Stack* stack = (struct Stack*)malloc(sizeof(struct Stack));
    stack->top = -1; // Stack is initially empty
    return stack;
}

// Function to check if the stack is full
int isFull(struct Stack* stack) {
    return stack->top == MAX_SIZE - 1;
}

// Function to check if the stack is empty
int isEmpty(struct Stack* stack) {
    return stack->top == -1;
}

// Function to push an element onto the stack
void push(struct Stack* stack, int value) {
    if (isFull(stack)) {
        printf("Stack Overflow! Cannot push %d onto stack.\n", value);
        return;
    }
    stack->items[++stack->top] = value;
    printf("%d pushed onto stack.\n", value);
}

// Function to pop an element from the stack
int pop(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack Underflow! Cannot pop from an empty stack.\n");
        return INT_MIN; // Return a sentinel value
    }
    return stack->items[stack->top--];
}

// Function to peek at the top element of the stack
int peek(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty. No top element.\n");
        return INT_MIN; // Return a sentinel value
    }
    return stack->items[stack->top];
}

// Function to display the elements of the stack
void displayStack(struct Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty.\n");
        return;
    }
    printf("Stack elements: ");
    for (int i = stack->top; i >= 0; i--) {
        printf("%d ", stack->items[i]);
    }
    printf("\n");
}

// Main function to demonstrate stack operations
int main() {
    struct Stack* stack = createStack();

    push(stack, 10);
    push(stack, 20);
    push(stack, 30);
    displayStack(stack);

    printf("Top element is %d\n", peek(stack));

    printf("%d popped from stack.\n", pop(stack));
    displayStack(stack);

    printf("%d popped from stack.\n", pop(stack));
    displayStack(stack);

    printf("%d popped from stack.\n", pop(stack));
    displayStack(stack);

    // Attempting to pop from an empty stack
    pop(stack);

    return 0;
}
