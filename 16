#include <stdio.h>
#include <stdlib.h>

// Define a structure for a polynomial term
struct Term {
    int coeff;      // Coefficient of the term
    int exp;        // Exponent of the term
    struct Term* next; // Pointer to the next term
};

// Function to create a new term
struct Term* createTerm(int coeff, int exp) {
    struct Term* newTerm = (struct Term*)malloc(sizeof(struct Term));
    newTerm->coeff = coeff;
    newTerm->exp = exp;
    newTerm->next = NULL;
    return newTerm;
}

// Function to insert a term in the polynomial
void insertTerm(struct Term** poly, int coeff, int exp) {
    struct Term* newTerm = createTerm(coeff, exp);
    
    // If the polynomial is empty or the new term has a higher exponent than the head
    if (*poly == NULL || (*poly)->exp < exp) {
        newTerm->next = *poly;
        *poly = newTerm;
    } else {
        // Traverse the polynomial to find the correct position
        struct Term* current = *poly;
        while (current->next != NULL && current->next->exp > exp) {
            current = current->next;
        }

        // If the term with the same exponent exists, add the coefficients
        if (current->exp == exp) {
            current->coeff += coeff;
            free(newTerm); // Free the newly created term since it is not needed
        } else {
            newTerm->next = current->next;
            current->next = newTerm;
        }
    }
}

// Function to add two polynomials
struct Term* addPolynomials(struct Term* poly1, struct Term* poly2) {
    struct Term* result = NULL; // Resultant polynomial

    // Traverse both polynomials and add them
    while (poly1 != NULL && poly2 != NULL) {
        if (poly1->exp > poly2->exp) {
            insertTerm(&result, poly1->coeff, poly1->exp);
            poly1 = poly1->next;
        } else if (poly1->exp < poly2->exp) {
            insertTerm(&result, poly2->coeff, poly2->exp);
            poly2 = poly2->next;
        } else {
            // If exponents are equal, add the coefficients
            insertTerm(&result, poly1->coeff + poly2->coeff, poly1->exp);
            poly1 = poly1->next;
            poly2 = poly2->next;
        }
    }

    // Add remaining terms from poly1
    while (poly1 != NULL) {
        insertTerm(&result, poly1->coeff, poly1->exp);
        poly1 = poly1->next;
    }

    // Add remaining terms from poly2
    while (poly2 != NULL) {
        insertTerm(&result, poly2->coeff, poly2->exp);
        poly2 = poly2->next;
    }

    return result; // Return the resultant polynomial
}

// Function to display the polynomial
void displayPolynomial(struct Term* poly) {
    if (poly == NULL) {
        printf("0\n");
        return;
    }

    struct Term* current = poly;
    while (current != NULL) {
        printf("%dx^%d", current->coeff, current->exp);
        current = current->next;
        if (current != NULL) {
            printf(" + ");
        }
    }
    printf("\n");
}

// Main function to demonstrate polynomial addition
int main() {
    struct Term* poly1 = NULL;
    struct Term* poly2 = NULL;

    // Inserting terms into the first polynomial
    insertTerm(&poly1, 5, 2);  // 5x^2
    insertTerm(&poly1, 4, 1);  // 4x^1
    insertTerm(&poly1, 2, 0);  // 2x^0

    // Inserting terms into the second polynomial
    insertTerm(&poly2, 3, 1);  // 3x^1
    insertTerm(&poly2, 6, 0);  // 6x^0

    // Display the polynomials
    printf("Polynomial 1: ");
    displayPolynomial(poly1);

    printf("Polynomial 2: ");
    displayPolynomial(poly2);

    // Add the polynomials
    struct Term* result = addPolynomials(poly1, poly2);

    // Display the result
    printf("Resultant Polynomial: ");
    displayPolynomial(result);

    return 0;
}
